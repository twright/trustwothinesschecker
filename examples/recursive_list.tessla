# Contents of this file:
# 1) Either implementation
# 2) Implementation of symbolic natural number with List, e.g., Suc(Suc...Suc((Z)))
# 3) Recursively defined List type: A symbolic representation that \st{utilizes} abuses the only recursive type in the language

##### 1) Either implementation  #####
type Either[L, R] := {isLeft : Bool, left : Option[L], right : Option[R]}
def left[L, R](val : L) : Either[L, R] = {isLeft = true, left = Some(val), right = None}
def right[L, R](val : R) : Either[L, R] = {isLeft = false, left = None, right = Some(val)}

##### 2) Symbolic natural number with List #####
type Nat = List[Unit]

def natCtorImpl(N : Int, res : Nat) : Nat = {
  if N == 0 then
    res
  else
    natCtorImpl(N-1, List.append(res, ()))
}

def natCtor(N : Int) : Nat = {
  natCtorImpl(N, List.empty())
}

###### 3) Recursively defined List type #####

def list1[T](el1 : T) = List.append(List.empty(), el1)
def list2[T](el1 : T, el2 : T) = List.append(list1(el1), el2)
def list3[T](el1 : T, el2 : T, el3 : T) = List.append(list2(el1, el2), el3)
def list4[T](el1 : T, el2 : T, el3 : T, el4 : T) = List.append(list3(el1, el2, el3), el4)
def list5[T](el1 : T, el2 : T, el3 : T, el4 : T, el5 : T) = List.append(list4(el1, el2, el3, el4), el5)
def list6[T](el1 : T, el2 : T, el3 : T, el4 : T, el5 : T, el6 : T) = List.append(list5(el1, el2, el3, el4, el5), el6)
def list7[T](el1 : T, el2 : T, el3 : T, el4 : T, el5 : T, el6 : T, el7 : T) = List.append(list6(el1, el2, el3, el4, el5, el6), el7)
def list8[T](el1 : T, el2 : T, el3 : T, el4 : T, el5 : T, el6 : T, el7 : T, el8 : T) = List.append(list7(el1, el2, el3, el4, el5, el6, el7), el8)

# Rules: None means ], Some(None) means [, Some(Some(val)) means val
# NOTE: Final closing brackets are optional
type RListEl[T] = Option[Option[T]]
type RList[T] = List[RListEl[T]]
# Unfortunately, need this in order to differentiate between e.g., head([true]) and head([[true]])
type RListRes[T] = {val : RList[T], isList : Bool}
def open_bracket[T] : RListEl[T] = Some(None)
def closed_bracket[T] : RListEl[T] = None
def value[T](val : T) : RListEl[T] = Some(Some(val))

type RListElB = RListEl[Bool]
type RListB = RList[Bool]
type RListResB = RListRes[Bool]
type ZRListElB = (Int, RListElB)
def open_bracket_b = open_bracket[Bool]
def closed_bracket_b = closed_bracket[Bool]
def value_b(val : Bool) = value[Bool](val)
def get_list_el_b(val : RListElB) = getSome(getSome(val))

def rlist_serialize(list : RListB) : String = {
  def impl(list : RListB, res : String, nest_level : Int) : String = {
    def close_final_brackets(res : String, nest_level : Int) : String = {
      if nest_level == 1 then
        String.concat(res, "]")
      else
        close_final_brackets(String.concat(res, "]"), nest_level - 1)
    }

    # Edge case: Add comma unless next element is a closed bracket
    def maybe_comma_space(t : RListB) : String = {
      if List.isEmpty(t) || List.head(t) == closed_bracket_b then
        ""
      else
        ", "
    }

    def body(list : RListB, res : String, nest_level : Int) : String = {
      def h = List.head(list)
      def t = List.tail(list)
      if h == open_bracket_b then
        impl(List.tail(list), String.concat(res, "["), nest_level + 1)
      else if h == closed_bracket_b then
        impl(List.tail(list), String.concat(res, String.concat("]", maybe_comma_space(t))), nest_level - 1)
      else
        impl(List.tail(list), String.concat(res, String.concat(String.format("%s", get_list_el_b(h)), maybe_comma_space(t))), nest_level)
    }



    if List.isEmpty(list) then
      close_final_brackets(res, nest_level)
    else
      body(list, res, nest_level)
  }

  impl(list, "[", 1)
}


def rlist_size(list : RListB) : Int = {
  def impl(list : RListB, acc : Int) : Int = {
    if List.isEmpty(list) then
      acc
    else
      impl(rlist_tail(list), acc + 1)
  }
  impl(list, 0)
}

# NOTE: Just like with normal head, running it on an empty list gives runtime error
def rlist_head(list : RListB) : RListResB = {
  def impl(list : RListB, acc : RListB, indent_level : Int) : RListB = {
    def body(list : RListB, acc : RListB, indent_level : Int) : RListB = {
        def h = List.head(list)
        def t = List.tail(list)
        if h == open_bracket_b then
          impl(t, List.append(acc, h), indent_level + 1)
        else if h == closed_bracket_b then
          if indent_level == 1 then # If this is final closed bracket
            acc
          else
            impl(t, List.append(acc, h), indent_level - 1)
        else
          impl(t, List.append(acc, h), indent_level)
    }

    if List.isEmpty(list) then
      acc
    else
      body(list, acc, indent_level)
  }

  if List.head(list) == open_bracket_b then
    {val = impl(List.tail(list), List.empty(), 1), isList = true}
  else
    {val = list1(List.head(list)), isList = false}
}

# NOTE: Just like with normal tail, running it on an empty list gives runtime error
def rlist_tail(list : RListB) : RListB = {
  def iterate(list : RListB, indent_level : Int) : RListB = {
    def body(list : RListB, indent_level : Int) : RListB = {
      def h = List.head(list)
      def t = List.tail(list)
      if h == closed_bracket_b then
        iterate(List.tail(list), indent_level - 1)
      else if h == open_bracket_b then
        iterate(List.tail(list), indent_level + 1)
      else
        iterate(List.tail(list), indent_level)
    }

    if List.isEmpty(list) then
      List.empty() # Means that original list contained 1 element so tail is empty list
    else if indent_level == 0 then # Found end of list, return element after that
      list
    else
      body(list, indent_level) # Do actual iteration
  }

  if rlist_head(list).isList == false then
    List.tail(list)
  else
    iterate(List.tail(list), 1)
}

# []
def test0 : RListB = List.empty()

# [true, false]
def test1 : RListB = list2(value_b(true), value_b(false))

# [true, [true]]
def test2 : RListB = list3(value_b(true), open_bracket, value_b(true))

# [[], [true, [false]]]
def test3 : RListB = list6(open_bracket_b, closed_bracket_b, open_bracket_b, value_b(true), open_bracket_b, value_b(false))

# [[true], [false]]
def test4 : RListB = list5(open_bracket_b, value_b(true), closed_bracket_b, open_bracket_b, value_b(false))

# [[[[[[[[[[]]]]]]]]]]
def test5 : RListB = {
  List.append(List.append(List.append(List.append(List.append(List.append(List.append(List.append(List.append(List.empty(), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b)
}

# [true, false, false]
def test6 : RListB = list3(value_b(true), value_b(false), value_b(false))

# [[[]], false]
def test7 : RListB = list5(open_bracket_b, open_bracket_b, closed_bracket_b, closed_bracket_b, value_b(false))

# [[[], true], false]
def test8 : RListB = list6(open_bracket_b, open_bracket_b, closed_bracket_b, value_b(true), closed_bracket_b, value_b(false))

#### Main:

def test_cases = list8(test1, test2, test3, test4, test5, test6, test7, test8) # Intentionally without test0 as it causes RT error for some tests
def test_cases_and_empty = List.prepend(test0, test_cases)
def serialize_exp_results = List.prepend("[]", list8("[true, false]", "[true, [true]]", "[[], [true, [false]]]", "[[true], [false]]", "[[[[[[[[[[]]]]]]]]]]", "[true, false, false]", "[[[]], false]", "[[[], true], false]"))
def size_exp_results = List.prepend(0, list8(2, 2, 2, 2, 1, 3, 2, 2))
def head_exp_results = list8( {isList = false, val = list1(value_b(true))},
                          {isList = false, val = list1(value_b(true))},
                          {isList = true, val = List.empty()},
                          {isList = true, val = list1(value_b(true))},
                          {isList = true, val = List.tail(test5)},
                          {isList = false, val = list1(value_b(true))},
                          {isList = true, val = list2(open_bracket_b, closed_bracket_b)},
                          {isList = true, val = list3(open_bracket_b, closed_bracket_b, value_b((true)))})
def tail_exp_results = list8( list1(value_b(false)),
                          list2(open_bracket_b, value_b(true)),
                          list4(open_bracket_b, value_b(true), open_bracket_b, value_b(false)),
                          list2(open_bracket_b, value_b(false)),
                          List.empty(),
                          list2(value_b(false), value_b(false)),
                          list1(value_b(false)),
                          list1(value_b(false)))

def evaluate_tests[T1, T2](test_cases : List[T1], exp_results : List[T2], func : (T1) => T2) : List[Bool] = {
  List.map(
    List.zip(
      List.map(test_cases, func), # Call func on every case
    exp_results), # Zip with expected results
  (val) => val._1 == val._2) # Evaluate if they are equal
}

out evaluate_tests(test_cases_and_empty, serialize_exp_results, rlist_serialize) as serialize_results

out evaluate_tests(test_cases_and_empty, size_exp_results, rlist_size) as size_results

out evaluate_tests(test_cases, head_exp_results, rlist_head) as head_results

out evaluate_tests(test_cases, tail_exp_results, rlist_tail) as tail_results