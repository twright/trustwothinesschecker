# Contents of this file:
# 1) Either implementation
# 2) Implementation of symbolic natural number with List, e.g., Suc(Suc...Suc((Z)))
# 3) Recursively defined List type: A symbolic representation that \st{utilizes} abuses the only recursive type in the language

##### 1) Either implementation  #####
type Either[L, R] := {isLeft : Bool, left : Option[L], right : Option[R]}
def left[L, R](val : L) : Either[L, R] = {isLeft = true, left = Some(val), right = None}
def right[L, R](val : R) : Either[L, R] = {isLeft = false, left = None, right = Some(val)}

##### 2) Symbolic natural number with List #####
type Nat = List[Unit]

def natCtorImpl(N : Int, res : Nat) : Nat = {
  if N == 0 then
    res
  else
    natCtorImpl(N-1, List.append(res, ()))
}

def natCtor(N : Int) : Nat = {
  natCtorImpl(N, List.empty())
}

###### 3) Recursively defined List type #####

# Rules: None means ], Some(None) means [, Some(Some(val)) means val
# NOTE: Final closing brackets are optional
type RecursiveListEl[T] = Option[Option[T]]
type RecursiveList[T] = List[RecursiveListEl[T]]

def open_bracket[T] : RecursiveListEl[T] = Some(None)
def closed_bracket[T] : RecursiveListEl[T] = None
def value[T](val : T) : RecursiveListEl[T] = Some(Some(val))

type RecursiveListElB = RecursiveListEl[Bool]
type RecursiveListB = RecursiveList[Bool]
def open_bracket_b = open_bracket[Bool]
def closed_bracket_b = closed_bracket[Bool]
def value_b(val : Bool) = value[Bool](val)
def get_list_el_b(val : RecursiveListElB) = getSome(getSome(val))

def serialize_recursive_list_b_impl_body(list : RecursiveListB, res : String, nest_level : Int) : String = {
  def h = List.head(list)
  def t = List.tail(list)
    if h == open_bracket_b then
      serialize_recursive_list_b_impl(List.tail(list), String.concat(res, "["), nest_level + 1)
    else if h == closed_bracket_b then
      serialize_recursive_list_b_impl(List.tail(list), String.concat(res, "], "), nest_level - 1)
    else
      if (List.size(list) == 1) || (List.head(t) == closed_bracket_b) then
        serialize_recursive_list_b_impl(List.tail(list), String.concat(res, String.format("%s", get_list_el_b(h))), nest_level)
      else
        serialize_recursive_list_b_impl(List.tail(list), String.concat(res, String.concat(String.format("%s", get_list_el_b(h)), ", ")), nest_level)
}

def serialize_recursive_list_b_impl_close_brackets(res : String, nest_level : Int) : String = {
  if nest_level == 1 then
    String.concat(res, "]")
  else
    serialize_recursive_list_b_impl_close_brackets(String.concat(res, "]"), nest_level - 1)
}

def serialize_recursive_list_b_impl(list : RecursiveListB, res : String, nest_level : Int) : String = {
  if List.isEmpty(list) then
    serialize_recursive_list_b_impl_close_brackets(res, nest_level)
  else
    serialize_recursive_list_b_impl_body(list, res, nest_level)
}

def serialize_recursive_list_b(list : RecursiveListB) : String = {
  serialize_recursive_list_b_impl(list, "[", 1)
}


# []
def test0 : RecursiveListB = List.empty()

# [true, false]
def test1 : RecursiveListB = {
  def l1 = List.append(List.empty(), value_b(true))
  List.append(l1, value_b(false))
}

# [true, [true]]
def test2 : RecursiveListB = {
  def l1 = List.append(List.empty, value_b(true))
  def l2 = List.append(l1, open_bracket_b)
  List.append(l2, value_b(true))
}

# [[], [true, [false]]]
def test3 : RecursiveListB = {
  def l1 = List.append(List.empty(), open_bracket_b)
  def l2 = List.append(l1, closed_bracket_b)
  def l3 = List.append(l2, open_bracket_b)
  def l4 = List.append(l3, value_b(true))
  def l5 = List.append(l4, open_bracket_b)
  List.append(l5, value_b(false))
}

# [[true], [false]]
def test4 : RecursiveListB = {
  def l1 = List.append(List.empty(), open_bracket_b)
  def l2 = List.append(l1, value_b(true))
  def l3 = List.append(l2, closed_bracket_b)
  def l4 = List.append(l3, open_bracket_b)
  List.append(l4, value_b(false))
}

# [[[[[[[[[[]]]]]]]]]]
def test5 : RecursiveListB = {
  List.append(List.append(List.append(List.append(List.append(List.append(List.append(List.append(List.append(List.empty(), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b), open_bracket_b)
}

#### Main:

def y = left[Int, Unit](42)
def z = right[Unit, Int](69)
def w = natCtor(0)

def serialize_test0 = serialize_recursive_list_b(test0) == "[]"
def serialize_test1 = serialize_recursive_list_b(test1) == "[true, false]"
def serialize_test2 = serialize_recursive_list_b(test2) == "[true, [true]]"
def serialize_test3 = serialize_recursive_list_b(test3) == "[[], [true, [false]]]"
def serialize_test4 = serialize_recursive_list_b(test4) == "[[true], [false]]"
def serialize_test5 = serialize_recursive_list_b(test5) == "[[[[[[[[[[]]]]]]]]]]"

def all_tests_passed = serialize_test0 && serialize_test1 && serialize_test2 && serialize_test3 && serialize_test4 && serialize_test5


out y
out z
out w
out all_tests_passed